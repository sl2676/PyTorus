resTorus_L
Torus.h
Numerics.templates
Numerics.h
Random.h
jjb_utils.h
PJMebf.h
PJMCoords.h
PJM_cline.h
falPot.h
bar_pot.h
eTorus.h

//torus.h
generatingFunction.h
CHB.h
Vector.h
Matrix.h
Potential.h
PJMCoords.h
Fit.h
Types.h
Toy_Isochrone.h

#include "../../Torus/src/utils/Vector.h"

#include <pybind11/pybind11.h>
#include <pybind11/operators.h>
#include <pybind11/complex.h>
#include <pybind11/stl_bind.h>
#include <pybind11/stl.h>

namespace py = pybind11;

struct BaseVector {
    virtual ~BaseVector() = default;
    virtual py::object toPython() const = 0;
};

template<typename T>
struct TypedVector : BaseVector {
    Vector<T, 3> vec;
    TypedVector(T a, T b, T c) {
        T arr[] = {a, b, c};
        vec = Vector<T, 3>(arr);
    }
    py::object toPython() const override {
        return py::cast(vec);
    }
};

class PyVector {
public:
    std::unique_ptr<BaseVector> baseVec;

    PyVector(py::args args) {
    if (!args.empty()) {
            if (py::isinstance<py::int_>(args[0])) {
                baseVec = std::make_unique<TypedVector<int>>(args[0].cast<int>(), args[1].cast<int>(), args[2].cast<int>());
            } else if (py::isinstance<py::float_>(args[0])) {
                baseVec = std::make_unique<TypedVector<float>>(args[0].cast<float>(), args[1].cast<float>(), args[2].cast<float>());
            } else if (py::isinstance<py::object>(args[0]) && py::hasattr(args[0], "real") && py::hasattr(args[0], "imag")) {
                baseVec = std::make_unique<TypedVector<std::complex<float>>>(args[0].cast<std::complex<float>>(), args[1].cast<std::complex<float>>(), args[2].cast<std::complex<float>>());
            } else {
                throw std::runtime_error("Unable to determine the vector type from arguments");
            }
        }
	}

    py::object toPython() const {
        return baseVec->toPython();
    }
};

void init_vector(py::module_ &torus) {
    py::class_<PyVector>(torus, "Vector")
        .def(py::init<py::args>())
        .def("__repr__", [](const PyVector &p) {
            return py::str(p.toPython());
        });
}


std::complex<float> operator*(const PyVector& other) const {
    if (typeid(*baseVec.get()) != typeid(*other.baseVec.get())) {
        throw std::runtime_error("Dot product requires both vectors to be of the same type.");
    }

    // Handling float vectors
    if (auto selfVec = dynamic_cast<const TypedVector<float>*>(baseVec.get())) {
        if (auto otherVec = dynamic_cast<const TypedVector<float>*>(other.baseVec.get())) {
            // Casting result to complex<float> even if operands are float for uniform return type
            return std::complex<float>(selfVec->dot(*otherVec), 0.0f);
        }
    }
    // Handling int vectors
    if (auto selfVec = dynamic_cast<const TypedVector<int>*>(baseVec.get())) {
        if (auto otherVec = dynamic_cast<const TypedVector<int>*>(other.baseVec.get())) {
            // Casting result to complex<float> even if operands are int for uniform return type
            return std::complex<float>(static_cast<float>(selfVec->dot(*otherVec)), 0.0f);
        }
    }
    // Handling std::complex<float> vectors
    if (auto selfVec = dynamic_cast<const TypedVector<std::complex<float>>*>(baseVec.get())) {
        if (auto otherVec = dynamic_cast<const TypedVector<std::complex<float>>*>(other.baseVec.get())) {
            return selfVec->dot(*otherVec);
        }
    }

    throw std::runtime_error("Unsupported vector type for dot product.");
}
std::unique_ptr<BaseVector> PyVector::addVectors(const BaseVector* a, const BaseVector* b) {
    // Attempt to dynamically cast to TypedVector<std::complex<float>> for both operands
    auto aComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a);
    auto bComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(b);
    
    if (!aComplex || !bComplex) {
        // If either operand is not a complex vector, perform necessary conversions
        // to TypedVector<std::complex<float>> before addition.
        // This part of the code will include logic to convert int or float vectors
        // to complex vectors, similar to the existing logic in your addVectors method.
    }
    
    // Perform addition once both operands are TypedVector<std::complex<float>>
    Vector<std::complex<float>, 3> resultVec = aComplex->vec + bComplex->vec;
    return std::make_unique<TypedVector<std::complex<float>>>(resultVec);
}

/*
	static std::unique_ptr<BaseVector> addVectors(const BaseVector* a, const BaseVector* b) {
    	if (auto aComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a)) {
        	Vector<std::complex<float>, 3> bVec;
        	if (auto bComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(b)) {
            	bVec = bComplex->vec;
        	} else if (auto bFloat = dynamic_cast<const TypedVector<float>*>(b)) {
            	for (size_t i = 0; i < 3; i++) {
                	bVec[i] = {bFloat->vec[i], 0.0f}; 
            	}
        	} else if (auto bInt = dynamic_cast<const TypedVector<int>*>(b)) {
            	for (size_t i = 0; i < 3; i++) {
                	bVec[i] = {static_cast<float>(bInt->vec[i]), 0.0f};
            	}
        	} else {
            	throw std::runtime_error("Unsupported vector type for addition");
        	}
        	Vector<std::complex<float>, 3> resultVec = aComplex->vec + bVec;
        	return std::make_unique<TypedVector<std::complex<float>>>(resultVec);
    	}
    	throw std::runtime_error("Unsupported vector type for addition");
	}  
	static std::unique_ptr<BaseVector> addVectors(const BaseVector* a, const BaseVector* b) {
        // Simplified logic to determine the type and convert if necessary
        auto aComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a) ? 
                        std::make_unique<TypedVector<std::complex<float>>>(*dynamic_cast<const TypedVector<std::complex<float>>*>(a)) :
                        convertToComplex(dynamic_cast<const TypedVector<float>*>(a));
        auto bComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(b) ? 
                        std::make_unique<TypedVector<std::complex<float>>>(*dynamic_cast<const TypedVector<std::complex<float>>*>(b)) :
                        convertToComplex(dynamic_cast<const TypedVector<float>*>(b));
                        
        Vector<std::complex<float>, 3> result;
        for (size_t i = 0; i < 3; ++i) {
            result[i] = aComplex->vec[i] + bComplex->vec[i];
        }
        return std::make_unique<TypedVector<std::complex<float>>>(result);
    }
 
	static std::unique_ptr<BaseVector> addVectors(const BaseVector* a, const BaseVector* b) {
    if (typeid(*a) == typeid(*b)) {
        if (auto aInt = dynamic_cast<const TypedVector<int>*>(a)) {
            return aInt->add(b); 
        } else if (auto aFloat = dynamic_cast<const TypedVector<float>*>(a)) {
            return aFloat->add(b); 
        } else if (auto aComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a)) {
            return aComplex->add(b); 
        }
    }
	static std::unique_ptr<BaseVector> addVectors(const BaseVector* a, const BaseVector* b) {
    	bool isAComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a) != nullptr;
    	bool isBComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(b) != nullptr;
    	bool isAFloat = dynamic_cast<const TypedVector<float>*>(a) != nullptr;
    	bool isBFloat = dynamic_cast<const TypedVector<float>*>(b) != nullptr;

    	if (isAComplex || isBComplex) {
        	auto aComplex = isAComplex ? static_cast<const TypedVector<std::complex<float>>*>(a) : convertToComplex(dynamic_cast<const TypedVector<float>*>(a));
        	auto bComplex = isBComplex ? static_cast<const TypedVector<std::complex<float>>*>(b) : convertToComplex(dynamic_cast<const TypedVector<float>*>(b));

        	Vector<std::complex<float>, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aComplex->vec[i] + bComplex->vec[i];
        	}
        	return std::make_unique<TypedVector<std::complex<float>>>(resultVec);
    	}
    	else if (isAFloat || isBFloat) {
        	auto aFloat = isAFloat ? static_cast<const TypedVector<float>*>(a) : convertToFloat(dynamic_cast<const TypedVector<int>*>(a));
        	auto bFloat = isBFloat ? static_cast<const TypedVector<float>*>(b) : convertToFloat(dynamic_cast<const TypedVector<int>*>(b));

        	Vector<float, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aFloat->vec[i] + bFloat->vec[i];
        	}
        	return std::make_unique<TypedVector<float>>(resultVec);
    	}
    	else {
        	auto aInt = static_cast<const TypedVector<int>*>(a);
        	auto bInt = static_cast<const TypedVector<int>*>(b);

        	Vector<int, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aInt->vec[i] + bInt->vec[i];
        	}
        	return std::make_unique<TypedVector<int>>(resultVec);
    	}
	}
	static std::unique_ptr<BaseVector> addVectors(const BaseVector* a, const BaseVector* b) {
	    bool isAComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(a) != nullptr;
	    bool isBComplex = dynamic_cast<const TypedVector<std::complex<float>>*>(b) != nullptr;
    	bool isAFloat = dynamic_cast<const TypedVector<float>*>(a) != nullptr;
    	bool isBFloat = dynamic_cast<const TypedVector<float>*>(b) != nullptr;

    	if (isAComplex || isBComplex) {
        	auto aComplex = isAComplex ? 
				std::static_pointer_cast<TypedVector<std::complex<float>>>(a) : 
             	convertToComplex(dynamic_cast<const TypedVector<float>*>(a));
        	auto bComplex = isBComplex ? 
                std::static_pointer_cast<TypedVector<std::complex<float>>>(b) : 
               	convertToComplex(dynamic_cast<const TypedVector<float>*>(b));

        	Vector<std::complex<float>, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aComplex->vec[i] + bComplex->vec[i];
        	}
        	return std::make_unique<TypedVector<std::complex<float>>>(resultVec);
    	}
    	else if (isAFloat || isBFloat) {
        	auto aFloat = isAFloat ? 
				std::static_pointer_cast<TypedVector<float>>(a) : 
                convertToFloat(dynamic_cast<const TypedVector<int>*>(a));
        	auto bFloat = isBFloat ? 
                std::static_pointer_cast<TypedVector<float>>(b) : 
                convertToFloat(dynamic_cast<const TypedVector<int>*>(b));

        	Vector<float, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aFloat->vec[i] + bFloat->vec[i];
        	}
        	return std::make_unique<TypedVector<float>>(resultVec);
    	} else {
        	auto aInt = static_cast<const TypedVector<int>*>(a);
        	auto bInt = static_cast<const TypedVector<int>*>(b);

        	Vector<int, 3> resultVec;
        	for (size_t i = 0; i < 3; ++i) {
            	resultVec[i] = aInt->vec[i] + bInt->vec[i];
        	}
        	return std::make_unique<TypedVector<int>>(resultVec);
    	}
	}

    auto convertToComplexAndAdd = [](const BaseVector* v1, const BaseVector* v2) -> std::unique_ptr<BaseVector> {
        Vector<std::complex<float>, 3> vec1, vec2;
        
        if (auto v1Int = dynamic_cast<const TypedVector<int>*>(v1)) {
            for (size_t i = 0; i < 3; i++) vec1[i] = {static_cast<float>(v1Int->vec[i]), 0.0f};
        } else if (auto v1Float = dynamic_cast<const TypedVector<float>*>(v1)) {
            for (size_t i = 0; i < 3; i++) vec1[i] = {v1Float->vec[i], 0.0f};
        } else if (auto v1Complex = dynamic_cast<const TypedVector<std::complex<float>>*>(v1)) {
            vec1 = v1Complex->vec;
        }

        if (auto v2Int = dynamic_cast<const TypedVector<int>*>(v2)) {
            for (size_t i = 0; i < 3; i++) vec2[i] = {static_cast<float>(v2Int->vec[i]), 0.0f};
        } else if (auto v2Float = dynamic_cast<const TypedVector<float>*>(v2)) {
            for (size_t i = 0; i < 3; i++) vec2[i] = {v2Float->vec[i], 0.0f};
        } else if (auto v2Complex = dynamic_cast<const TypedVector<std::complex<float>>*>(v2)) {
            vec2 = v2Complex->vec;
        }

        Vector<std::complex<float>, 3> resultVec;
        for (size_t i = 0; i < 3; ++i) {
            resultVec[i] = vec1[i] + vec2[i];
        }
        return std::make_unique<TypedVector<std::complex<float>>>(resultVec);
    };

    return convertToComplexAndAdd(a, b);
};

*/

/*
	PyVector add(const PyVector& other) const {
    	if (!baseVec || !other.baseVec) {
        	throw std::runtime_error("One or both vectors are uninitialized");
    	}
    	auto resultVec = baseVec->add(other.baseVec.get());
    	return PyVector(std::move(resultVec));
	}

	template<typename Scalar>
    PyVector operator*(Scalar scalar) const {
        auto* typedVector = dynamic_cast<const TypedVector<Scalar>*>(baseVec.get());
        if (!typedVector) {
            throw std::runtime_error("Operation not supported for this vector type.");
        }
        return PyVector(new TypedVector<Scalar>(*typedVector * scalar));
    }
*/
/*
	template<typename Scalar>	
	PyVector add_scalar(Scalar scalar) const {
    auto* typedVector = dynamic_cast<const TypedVector<Scalar>*>(baseVec.get());
    if (!typedVector) {
        throw std::runtime_error("Scalar addition not supported for this vector type.");
    }

    Vector<Scalar, 3> addedVector = typedVector->vec + scalar; 
    TypedVector<Scalar>* resultVector = new TypedVector<Scalar>(addedVector[0], addedVector[1], addedVector[2]);

    return PyVector(resultVector);
	}
	

	template<typename Scalar>    
	PyVector add_scalar(Scalar scalar) const {
    	auto* typedVector = dynamic_cast<const TypedVector<Scalar>*>(baseVec.get());
    	if (!typedVector) {
        	throw std::runtime_error("Scalar addition not supported for this vector type.");
    	}

    	Vector<Scalar, 3> addedVector = {typedVector->vec[0] + scalar, typedVector->vec[1] + scalar, typedVector->vec[2] + scalar};
   		return PyVector(std::unique_ptr<BaseVector>(new TypedVector<Scalar>(addedVector[0], addedVector[1], addedVector[2])));
	}
*/

/*
	PyVector add(const PyVector& other) const {
    	if (typeid(*this->baseVec) == typeid(TypedVector<int>) && typeid(*other.baseVec) == typeid(TypedVector<float>)) {
        	auto* thisVecAsFloat = dynamic_cast<TypedVector<float>*>(this->baseVec.get());
        	auto* otherVecAsFloat = dynamic_cast<TypedVector<float>*>(other.baseVec.get());
        	auto resultVec = std::make_unique<TypedVector<float>>(*thisVecAsFloat + *otherVecAsFloat);
        	return PyVector(std::move(resultVec));
    	}
	}
	*/


/*
	TypedVector operator+(T scalar) const {
    	return TypedVector(vec[0] + scalar, vec[1] + scalar, vec[2] + scalar);
	}	
*/

/*
	template<typename T, typename Scalar>
	auto operator+(const TypedVector<T>& vec, Scalar scalar) {
    	using ResultType = Promote_t<std::common_type_t<T, Scalar>>;

    	Vector<ResultType, 3> result = {vec.vec[0] + scalar, vec.vec[1] + scalar, vec.vec[2] + scalar};

    	return TypedVector<ResultType>(result);
	}
*/
/*
	template<typename T, typename Scalar>
	auto operator+(const TypedVector<T>& vec, Scalar scalar) -> TypedVector<Promote_t<std::common_type_t<T, Scalar>>> {
    	using PromotedType = Promote_t<std::common_type_t<T, Scalar>>;
    	Vector<PromotedType> result;

    	for (size_t i = 0; i < 3; ++i) {
        	result.data[i] = static_cast<PromotedType>(vec.vec.data[i]) + static_cast<PromotedType>(scalar);
    	}

    	return TypedVector<PromotedType>{result};
	}
*/
/*
	template<typename Scalar>
    PyVector operator+(Scalar scalar) const {
        if (auto* vec = dynamic_cast<TypedVector<Scalar>*>(baseVec.get())) {
            std::vector<Scalar> result(vec->vec.size());
            std::transform(vec->vec.begin(), vec->vec.end(), result.begin(),
                           [scalar](const Scalar& value) { return value + scalar; });
            return PyVector(std::make_shared<TypedVector<Scalar>>(result));
        }
        throw std::runtime_error("Unsupported operation");
    }
*/
/*
	template<typename Scalar>
PyVector operator+(Scalar scalar) const {
    auto addScalar = [this, scalar](auto* typedVec) -> std::unique_ptr<BaseVector> {
        using VecType = typename std::decay<decltype(*typedVec)>::type;
        using ScalarType = typename std::decay<decltype(scalar)>::type;
        using ResultVecType = TypedVector<Promote_t<std::common_type_t<typename VecType::ValueType, ScalarType>>>;

        // Assuming Vector<T, 3> has fixed size of 3 and supports direct access via []
        std::array<typename ResultVecType::ValueType, 3> result;
        for (int i = 0; i < 3; ++i) {
            result[i] = typedVec->vec[i] + scalar; // Direct scalar addition to each element
        }
        return std::make_unique<ResultVecType>(result[0], result[1], result[2]);
    };

    if (auto* intVec = dynamic_cast<TypedVector<int>*>(baseVec.get())) {
        return PyVector(addScalar(intVec));
    } else if (auto* floatVec = dynamic_cast<TypedVector<float>*>(baseVec.get())) {
        return PyVector(addScalar(floatVec));
    } else if (auto* complexVec = dynamic_cast<TypedVector<std::complex<float>>*>(baseVec.get())) {
        return PyVector(addScalar(complexVec));
    } else {
        throw std::runtime_error("Unsupported vector type for scalar addition.");
    }
}
*/
/*
	template<typename Scalar>
	PyVector PyVector::operator+(Scalar scalar) const {
    	if (auto* intVec = dynamic_cast<TypedVector<int>*>(baseVec.get())) {
        	auto resultVec = *intVec + scalar; 
        	return PyVector(std::make_unique<decltype(resultVec)>(resultVec));
    	} else if (auto* floatVec = dynamic_cast<TypedVector<float>*>(baseVec.get())) {
        	auto resultVec = *floatVec + scalar;
        	return PyVector(std::make_unique<decltype(resultVec)>(resultVec));
    	} else if (auto* complexVec = dynamic_cast<TypedVector<std::complex<float>>*>(baseVec.get())) {
        	auto resultVec = *complexVec + scalar;
        	return PyVector(std::make_unique<decltype(resultVec)>(resultVec));
    	} else {
        	throw std::runtime_error("Unsupported vector type for scalar addition.");
    	}
	}
*/

/*
	template<typename Scalar>
    PyVector operator+(Scalar scalar) const {
        auto addScalarToVector = [this, scalar](auto* vec) -> std::unique_ptr<BaseVector> {
            using VecType = decltype(vec);
            using ScalarType = Scalar;
            using ResultType = Promote_t<std::common_type_t<typename VecType::element_type::ValueType, ScalarType>>;

            Vector<ResultType, 3> result;
            for (size_t i = 0; i < 3; ++i) {
                result[i] = ResultType(vec->vec[i]) + ResultType(scalar);
            }
            return std::make_unique<TypedVector<ResultType>>(result);
        };

        if (auto* intVec = dynamic_cast<TypedVector<int>*>(baseVec.get())) {
            return PyVector(addScalarToVector(intVec));
        } else if (auto* floatVec = dynamic_cast<TypedVector<float>*>(baseVec.get())) {
            return PyVector(addScalarToVector(floatVec));
        } else if (auto* complexVec = dynamic_cast<TypedVector<std::complex<float>>*>(baseVec.get())) {
            return PyVector(addScalarToVector(complexVec));
        } else {
            throw std::runtime_error("Unsupported vector type for scalar addition.");
        }
    }


	template<typename Scalar>
	PyVector operator+(Scalar scalar) const {
        auto* typedVector = dynamic_cast<TypedVector<Scalar>*>(baseVec.get());
        if (!typedVector) {
            throw std::runtime_error("Operation not supported for this vector type.");
        }
        return PyVector(new TypedVector<Scalar>(*typedVector + scalar));
    }

//		.def("__add__", [](const PyVector& self, int scalar) { return self + scalar; }, "Add integer scalar")
//        .def("__add__", [](const PyVector& self, float scalar) { return self + scalar; }, "Add float scalar")
//        .def("__add__", [](const PyVector& self, std::complex<float> scalar) { return self + scalar; }, "Add complex scalar")

