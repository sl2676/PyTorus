std::visit([&](const auto& argA) {
    // Use std::decay_t to strip away reference and const qualifiers from decltype(argA)
    using DecayedTypeA = std::decay_t<decltype(argA)>; 
    using MatrixTypeA = typename DecayedTypeA::element_type; // Now you can access element_type safely
    using ValueTypeA = typename MatrixTypeA::ValueType;

    ValueTypeA scalarValue = py::cast<ValueTypeA>(scalar); 

    C.promoteMatrixVariantIfNeeded<ValueTypeA>(); 

    std::visit([&](auto& argC) {
        // Apply the same decay technique as above for argC
        using DecayedTypeC = std::decay_t<decltype(argC)>;
        using MatrixTypeC = typename DecayedTypeC::element_type;
        using ValueTypeC = typename MatrixTypeC::ValueType;

        if constexpr (std::is_same_v<ValueTypeA, ValueTypeC>) {
            if (argA->getRows() != argC->getRows() || argA->getCols() != argC->getCols()) {
                throw std::runtime_error("Matrix dimensions must match.");
            }

            for (size_t row = 0; row < argA->getRows(); ++row) {
                for (size_t col = 0; col < argA->getCols(); ++col) {
                    ValueTypeA aValue = argA->getValueAt(row, col);

                    // You don't need to convert aValue to ValueTypeC because we've ensured they are the same
                    argC->setValueAt(row, col, argC->getValueAt(row, col) + aValue * scalarValue);
                }
            }
        } else {
            throw std::runtime_error("Type mismatch between matrices A and C.");
        }
    }, C.getMatrixVariant());
}, A.getMatrixVariant());

