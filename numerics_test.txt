
int GaussJordan(PyMatrix& a, const size_t n, PyMatrix& b, const size_t m) {
    //size_t n = a.getRows(), m = b.getCols();
    std::vector<int> ipiv(n, 0);
    std::vector<size_t> indxr(n), indxc(n);

    for (size_t i = 0; i < n; ++i) {
        double big = 0.0;
        size_t irow = -1, icol = -1;

        for (size_t j = 0; j < n; ++j) {
            if (ipiv[j] != 1) {
                for (size_t k = 0; k < n; ++k) {
                    if (ipiv[k] == 0) {
                        double abs_val = std::abs(a.getValueAt(j, k).cast<double>());
                        if (abs_val >= big) {
                            big = abs_val;
                            irow = j;
                            icol = k;
                        }
                    }
                }
            }
        }

        ++ipiv[icol];
        if (irow != icol) {
            for (size_t l = 0; l < n; ++l) {
                auto temp = a.getValueAt(irow, l);
                a.set_value(irow, l, a.getValueAt(icol, l));
                a.set_value(icol, l, temp);
            }
            for (size_t l = 0; l < m; ++l) {
                auto temp = b.getValueAt(irow, l);
                b.set_value(irow, l, b.getValueAt(icol, l));
                b.set_value(icol, l, temp);
            }
        }
        indxr[i] = irow;
        indxc[i] = icol;

        if (a.getValueAt(icol, icol).cast<double>() == 0) return -1; 

        double pivinv = 1.0 / a.getValueAt(icol, icol).cast<double>();
        a.set_value(icol, icol, py::cast(1.0));
        for (size_t l = 0; l < n; ++l) 
            a.set_value(icol, l, py::cast(a.getValueAt(icol, l).cast<double>() * pivinv));
        for (size_t l = 0; l < m; ++l) 
            b.set_value(icol, l, py::cast(b.getValueAt(icol, l).cast<double>() * pivinv));

        for (size_t ll = 0; ll < n; ++ll) {
            if (ll != icol) {
                double dum = a.getValueAt(ll, icol).cast<double>();
                a.set_value(ll, icol, py::cast(0.0));
                for (size_t l = 0; l < n; ++l) 
                    a.set_value(ll, l, py::cast(a.getValueAt(ll, l).cast<double>() - a.getValueAt(icol, l).cast<double>() * dum));
                for (size_t l = 0; l < m; ++l) 
                    b.set_value(ll, l, py::cast(b.getValueAt(ll, l).cast<double>() - b.getValueAt(icol, l).cast<double>() * dum));
            }
        }
    }

    for (int l = n - 1; l >= 0; --l) {
        if (indxr[l] != indxc[l]) {
            for (size_t k = 0; k < n; ++k) {
                auto temp = a.getValueAt(k, indxr[l]);
                a.set_value(k, indxr[l], a.getValueAt(k, indxc[l]));
                a.set_value(k, indxc[l], temp);
            }
        }
    }
    return 0;
}


/*
int GaussJordanVec(PyMatrix& a, const size_t n, PyVector& b) {
    // Promote matrix and vector to double if not already
    a.promoteMatrixVariantIfNeeded<double>();
	b.baseVec = PyVector::convertToFloatIfNeeded(b.baseVec.get());


    // Accessing the underlying MatrixImpl<double> and vector<double>
    auto& matrixVariant = a.getMatrixVariant();
    auto matrixPtr = std::get_if<std::shared_ptr<MatrixImpl<double>>>(&matrixVariant);
    if (!matrixPtr) {
        throw std::runtime_error("Matrix promotion to double failed.");
    }
    auto& matrix = **matrixPtr;

    auto vecPtr = dynamic_cast<TypedVector<double>*>(b.baseVec.get());
    if (!vecPtr) {
        throw std::runtime_error("Vector promotion to double failed.");
    }
    std::vector<double>& vec = vecPtr->vec;

    // Gauss-Jordan Elimination
    for (size_t i = 0; i < n; i++) {
        // Search for maximum in this column
        double maxEl = std::abs(matrix.getValueAt(i, i));
        size_t maxRow = i;
        for (size_t k = i + 1; k < n; k++) {
            if (std::abs(matrix.getValueAt(k, i)) > maxEl) {
                maxEl = std::abs(matrix.getValueAt(k, i));
                maxRow = k;
            }
        }

        // Swap maximum row with current row (column by column)
        if (i != maxRow) {
            for (size_t k = i; k < n; k++) {
                std::swap(matrix.getValueAt(maxRow, k), matrix.getValueAt(i, k));
            }
            std::swap(vec[maxRow], vec[i]);
        }

        // Make all rows below this one 0 in current column
        for (size_t k = i + 1; k < n; k++) {
            double c = -matrix.getValueAt(k, i) / matrix.getValueAt(i, i);
            for (size_t j = i; j < n; j++) {
                if (i == j) {
                    matrix.getValueAt(k, j) = 0;
                } else {
                    matrix.getValueAt(k, j) += c * matrix.getValueAt(i, j);
                }
            }
            vec[k] += c * vec[i];
        }
    }

    // Solve equation Ax=b for an upper triangular matrix A
    for (size_t i = n; i-- > 0;) {
        vec[i] /= matrix.getValueAt(i, i);
        matrix.getValueAt(i, i) = 1;
        for (size_t k = 0; k < i; k++) {
            vec[k] -= matrix.getValueAt(k, i) * vec[i];
            matrix.getValueAt(k, i) = 0;
        }
    }

    return 0; // return 0 to indicate success
}
*/

#include <memory>
#include <type_traits>
#include <vector>
/*
int GaussJordan(PyMatrix& a, const size_t n, PyVector& b) {
    // Ensure vector is of type double, promote if necessary
    if (!b.isType<double>()) {
//        b = PyVector::convertToFloatIfNeeded(b.getBaseVector().get());
		b.baseVec = PyVector::convertToFloatIfNeeded(b.baseVec.get());

    }
    auto& vec = dynamic_cast<TypedVector<double>*>(b.getBaseVector().get())->vec;

    std::vector<int> ipiv(n, 0);
    std::vector<size_t> indxr(n), indxc(n);

    for (size_t i = 0; i < n; ++i) {
        double big = 0.0;
        size_t irow = -1, icol = -1;

        // Find the pivot
        for (size_t j = 0; j < n; ++j) {
            if (ipiv[j] != 1) {
                for (size_t k = 0; k < n; ++k) {
                    if (ipiv[k] == 0) {
                        double abs_val = std::abs(a.getValueAt(j, k).cast<double>());
                        if (abs_val > big) {
                            big = abs_val;
                            irow = j;
                            icol = k;
                        }
                    }
                }
            }
        }

        ++ipiv[icol];

        // Swap rows in matrix and vector
        if (irow != icol) {
            for (size_t l = 0; l < n; ++l) {
                std::swap(a.getValueAt(irow, l), a.getValueAt(icol, l));
            }
            std::swap(vec[irow], vec[icol]);
        }

        indxr[i] = irow;
        indxc[i] = icol;

        if (a.getValueAt(icol, icol).cast<double>() == 0.0) {
            return Numerics_message("GaussJordan: Singular Matrix 2");
        }

        double pivinv = 1.0 / a.getValueAt(icol, icol).cast<double>();
        a.set_value(icol, icol, py::cast(1.0));
        for (size_t l = 0; l < n; ++l) {
            a.set_value(icol, l, py::cast(a.getValueAt(icol, l).cast<double>() * pivinv));
        }
        vec[icol] *= pivinv;

        for (size_t ll = 0; ll < n; ++ll) {
            if (ll != icol) {
                double dum = a.getValueAt(ll, icol).cast<double>();
                for (size_t l = 0; l < n; ++l) {
                    a.set_value(ll, l, py::cast(a.getValueAt(ll, l).cast<double>() - a.getValueAt(icol, l).cast<double>() * dum));
                }
                vec[ll] -= vec[icol] * dum;
            }
        }
    }

    // Restore column positions
    for (int l = static_cast<int>(n) - 1; l >= 0; --l) {
        if (indxr[l] != indxc[l]) {
            for (size_t k = 0; k < n; ++k) {
                std::swap(a.getValueAt(k, indxr[l]), a.getValueAt(k, indxc[l]));
            }
        }
    }

    return 0;
}
*/


int GaussJordan(PyMatrix& a, const size_t n, PyVector& b) {
    if (!b.isType<double>()) {
//        b = PyVector::convertToFloatIfNeeded(b.getBaseVector().get());
		b.baseVec = PyVector::convertToFloatIfNeeded(b.baseVec.get());
    }

    auto& vec = dynamic_cast<TypedVector<double>*>(b.getBaseVector().get())->vec;
    std::vector<int> ipiv(n, 0);
    std::vector<size_t> indxr(n), indxc(n);

    for (size_t i = 0; i < n; ++i) {
        double big = 0.0;
        size_t irow = -1, icol = -1;

        for (size_t j = 0; j < n; ++j) {
            if (ipiv[j] != 1) {
                for (size_t k = 0; k < n; ++k) {
                    if (ipiv[k] == 0) {
                        double abs_val = std::abs(a.getValueAt(j, k).cast<double>());
                        if (abs_val > big) {
                            big = abs_val;
                            irow = j;
                            icol = k;
                        }
                    } else if (ipiv[k] > 1) {
                        return -1; 
                    }
                }
            }
        }

        ++ipiv[icol];
        if (irow != icol) {
            for (size_t l = 0; l < n; ++l) {
                std::swap(a.getValueAt(irow, l), a.getValueAt(icol, l));
            }
            std::swap(vec[irow], vec[icol]);
        }
        indxr[i] = irow;
        indxc[i] = icol;

        if (a.getValueAt(icol, icol).cast<double>() == 0.0) {
            return -1; 
        }

        double pivinv = 1.0 / a.getValueAt(icol, icol).cast<double>();
        a.set_value(icol, icol, 1.0);
        for (size_t l = 0; l < n; ++l) {
            a.set_value(icol, l, a.getValueAt(icol, l).cast<double>() * pivinv);
        }
        vec[icol] *= pivinv;

        for (size_t ll = 0; ll < n; ++ll) {
            if (ll != icol) {
                double dum = a.getValueAt(ll, icol).cast<double>();
                for (size_t l = 0; l < n; ++l) {
                    a.set_value(ll, l, a.getValueAt(ll, l).cast<double>() - a.getValueAt(icol, l).cast<double>() * dum);
                }
                vec[ll] -= vec[icol] * dum;
            }
        }
    }

    for (int l = static_cast<int>(n) - 1; l >= 0; --l) {
        if (indxr[l] != indxc[l]) {
            for (size_t k = 0; k < n; ++k) {
                std::swap(a.getValueAt(k, indxr[l]), a.getValueAt(k, indxc[l]));
            }
        }
    }

    return 0; // Success
}


