/*
int GaussJordan(PyMatrix& a, PyMatrix& b) {
    size_t n = a.getRows(), m = b.getCols();
    std::vector<int> ipiv(n, 0);
    std::vector<size_t> indxr(n), indxc(n);

    for (size_t i = 0; i < n; ++i) {
        double big = 0.0;
        size_t irow = -1, icol = -1;

        for (size_t j = 0; j < n; ++j) {
            if (ipiv[j] != 1) {
                for (size_t k = 0; k < n; ++k) {
                    if (ipiv[k] == 0) {
                        double abs_val = std::abs(a.getValueAt(j, k).cast<double>());
                        if (abs_val >= big) {
                            big = abs_val;
                            irow = j;
                            icol = k;
                        }
                    }
                }
            }
        }

        ++ipiv[icol];
        if (irow != icol) {
            for (size_t l = 0; l < n; ++l) {
                auto temp = a.getValueAt(irow, l);
                a.set_value(irow, l, a.getValueAt(icol, l));
                a.set_value(icol, l, temp);
            }
            for (size_t l = 0; l < m; ++l) {
                auto temp = b.getValueAt(irow, l);
                b.set_value(irow, l, b.getValueAt(icol, l));
                b.set_value(icol, l, temp);
            }
        }
        indxr[i] = irow;
        indxc[i] = icol;

        if (a.getValueAt(icol, icol).cast<double>() == 0) return -1; 

        double pivinv = 1.0 / a.getValueAt(icol, icol).cast<double>();
        a.set_value(icol, icol, py::cast(1.0));
        for (size_t l = 0; l < n; ++l) 
            a.set_value(icol, l, py::cast(a.getValueAt(icol, l).cast<double>() * pivinv));
        for (size_t l = 0; l < m; ++l) 
            b.set_value(icol, l, py::cast(b.getValueAt(icol, l).cast<double>() * pivinv));

        for (size_t ll = 0; ll < n; ++ll) {
            if (ll != icol) {
                double dum = a.getValueAt(ll, icol).cast<double>();
                a.set_value(ll, icol, py::cast(0.0));
                for (size_t l = 0; l < n; ++l) 
                    a.set_value(ll, l, py::cast(a.getValueAt(ll, l).cast<double>() - a.getValueAt(icol, l).cast<double>() * dum));
                for (size_t l = 0; l < m; ++l) 
                    b.set_value(ll, l, py::cast(b.getValueAt(ll, l).cast<double>() - b.getValueAt(icol, l).cast<double>() * dum));
            }
        }
    }

    for (int l = n - 1; l >= 0; --l) {
        if (indxr[l] != indxc[l]) {
            for (size_t k = 0; k < n; ++k) {
                auto temp = a.getValueAt(k, indxr[l]);
                a.set_value(k, indxr[l], a.getValueAt(k, indxc[l]));
                a.set_value(k, indxc[l], temp);
            }
        }
    }
    return 0;
}
*/

int GaussJordan(PyMatrix& a, const int n, PyMatrix& b) {
		
}

/*
int GaussJordan(PyMatrix& a, const size_t n, PyMatrix& b) {
	std::vector<int> ipiv(n, 0);
	std::vector<size_t> indxr(n), indxc(n);

	for (size_t j = 0; )
}
*/
